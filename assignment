
#============Q1 All Element Sum===========
def sumArray(l):
    a = 0
    for i in l:
        a+=i
    print('Sum of ',a)

l =[21,25,23,25,45]
sumArray(l)


   


#=========== Q2 1 Counter ======================
def counter(l):
    couterOne = 0
   
    for e in l:
        if e == 1:
            couterOne+=e

    print("Total 1 Count : ",couterOne)

l =[1,1,1,0,0,1,0,1,0,0,0]
counter(l)
    


#=========== Q3 Max value ======================

def maxDict(dict1,dict2):
    max_key = max(dict1,key=dict1.get)
    max_value = dict2.values()
    max1 = max(max_value)
    print(f"'{max_key}'", ":" ,max1)
    



dict1 = {"a": 1, "b": 2, "c": 3,"f":30}
dict2 = {"1": 1, "2": 2, "3": 40}

maxDict(dict1,dict2)

#===============Q4 ===========================
#moduls.py
from django.db import models


class Condidates(models.Model):
    name = models.CharField(max_length=70)
    email = models.EmailField(blank=True,null=True)
    scor= models.CharField(max_length=70)


#===========serializers.py=========
from rest_framework import serializers 
from .models import Condidates

class CondidatesSerializer(serializers.ModelSerializer):
 
    class Meta:
        model = Condidates
        fields = ('name','email')

#===========view.py==========
from .models import Condidates
from .serializers import CondidatesSerializer
from rest_framework.decorators import api_view
from django.http.response import JsonResponse
from rest_framework.parsers import JSONParser 
from django.db.models import Avg

@api_view(['GET', 'POST'])
def saveCondidates(request):
    if request.method == 'GET':
        serializer = CondidatesSerializer()
        
        d1 = {"ab":serializer}

        return render(request, context=d1)

 
    elif request.method == 'POST':
        data = JSONParser().parse(request)
        serializer = CondidatesSerializer(data=data)
        if serializer.is_valid():
            serializer.save()
            return JsonResponse(serializer.data, status=status.HTTP_201_CREATED) 
        return JsonResponse(serializer.errors, status=status.HTTP_400_BAD_REQUEST)

   

@api_view(['GET', 'POST'])

def find_highest_value(requit):
    
        highest = Condidates.objects.order_by('-scor')[0]
        d1= {'high':highest}
        return render(request ,context=d1)


@api_view(['GET', 'POST'])
def avg(request):
    avg= Condidates.objects.aggregate(avg('scor'))
    d1= {'avg':avg}
        return render(request ,context=d1)





    




        
           




